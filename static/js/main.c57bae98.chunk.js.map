{"version":3,"sources":["componenets/Scoreboard.js","componenets/Cards.js","componenets/ResetButton.js","componenets/GameOver.js","componenets/Gameboard.js","componenets/Header.js","resources/cardInfo.js","componenets/Game.js","App.js","index.js"],"names":["Scoreboard","props","useState","currentScore","highScore","setHighScore","className","Cards","characters","handleEvent","map","character","onClick","data-key","uniqueId","alt","name","src","process","image","ResetButton","text","GameOver","showStatus","gameOver","score","lastPick","resetGame","resetScore","Gameboard","Header","getCharacterList","arrayList","forEach","selected","Game","chars","setChars","newSelection","setNewSelection","setGameOver","lastSelected","setLastSelected","setScore","useEffect","newOrder","sort","Math","random","shuffle","e","newArrayList","item","target","dataset","key","prevScore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c57bae98.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../App\";\n\nexport default function Scoreboard(props) {\n  const [highScore, setHighScore] = useState(props.currentScore);\n  const currentScore = props.currentScore;\n  if (props.currentScore > highScore) {\n    setHighScore(currentScore);\n  }\n  return (\n    <div className=\"scoreboard\">\n      <span>Current Score: {currentScore}</span>\n      <div className=\"flex-gap\"></div>\n      <span>High Score: {highScore}</span>\n    </div>\n  );\n}\n","import \"../App\";\n\nexport default function Cards(props) {\n  const { characters, handleEvent } = props;\n  return characters.map((character) => (\n    <div\n      className=\"card\"\n      onClick={handleEvent}\n      key={character.uniqueId}\n      data-key={character.uniqueId}\n    >\n      <div className=\"card-wrapper\">\n        <img\n          className=\"card-image\"\n          alt={character.name}\n          src={`${process.env.PUBLIC_URL + character.image}`}\n        />\n      </div>\n      <p className=\"card-name\">{character.name}</p>\n    </div>\n  ));\n}\n","import React from \"react\";\n\nconst ResetButton = (props) => {\n  const { text, handleEvent } = props;\n  return (\n    <button className=\"reset-button\" onClick={handleEvent}>\n      {text}\n    </button>\n  );\n};\n\nexport default ResetButton;\n","import React from \"react\";\nimport ResetButton from \"./ResetButton\";\nconst GameOver = (props) => {\n  let showStatus = props.gameOver ? \"showIt\" : \"hidden\";\n  return (\n    <div className={showStatus}>\n      <p className=\"reset-message\">\n        {props.score === 12\n          ? \"You Membered Them All!!!\"\n          : `Dont you Membaa?? You picked ${props.lastPick}!`}\n      </p>\n      <div className=\"reset-image-wrapper\">\n        <img\n          className=\"reset-image\"\n          alt=\"Member Berry\"\n          src={`${process.env.PUBLIC_URL + \"/images/characters/member.png\"}`}\n        />\n      </div>\n      <ResetButton\n        text=\"Reset Game\"\n        handleEvent={() => {\n          props.resetGame(false);\n          props.resetScore(0);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default GameOver;\n","import React from \"react\";\nimport \"../App\";\nimport Cards from \"./Cards\";\nimport GameOver from \"./GameOver\";\n\nexport default function Gameboard(props) {\n  return (\n    <div className=\"gamebaord-wrapper\">\n      <div className=\"gameboard\">\n        <Cards characters={props.characters} handleEvent={props.handleEvent} />\n        <GameOver\n          gameOver={props.gameOver}\n          resetGame={props.resetGame}\n          resetScore={props.resetScore}\n          lastPick={props.lastPick}\n          score={props.score}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../App\";\n\nexport default function Header() {\n  return (\n    <div className={\"Header\"}>\n      <p>South Park Memory Game</p>\n    </div>\n  );\n}\n","import { uniqueId } from \"lodash\";\n\nconst characters = [\n  { name: \"Kenny\", image: \"/images/characters/kenny-mccormick.png\" },\n  { name: \"Cartman\", image: \"/images/characters/eric-cartman.png\" },\n  { name: \"Butters\", image: \"/images/characters/butters-stotch.png\" },\n  { name: \"Chef\", image: \"/images/characters/chef-2.png\" },\n  { name: \"Jimmy\", image: \"/images/characters/jimmy-valmer.png\" },\n  { name: \"Kyle\", image: \"/images/characters/kyle-broflovski.png\" },\n  { name: \"Mr. Hankey\", image: \"/images/characters/mr-hankey.png\" },\n  {\n    name: \"Barbrady\",\n    image: \"/images/characters/officer-barbrady.png\",\n  },\n  { name: \"Stan\", image: \"/images/characters/stan-marsh.png\" },\n  { name: \"Towelie\", image: \"/images/characters/towelie.png\" },\n  { name: \"Ike\", image: \"/images/characters/ike.png\" },\n  { name: \"Wendy\", image: \"/images/characters/wendy.png\" },\n];\n\nconst assignId = (arrayList) => {\n  arrayList.forEach((character) => {\n    character.uniqueId = uniqueId(\"character_\");\n    character.selected = false;\n  });\n  return arrayList;\n};\n\nexport function getCharacterList() {\n  return assignId(characters);\n}\n","import React, { useState, useEffect } from \"react\";\nimport Scoreboard from \"./Scoreboard\";\nimport Gameboard from \"./Gameboard\";\nimport Header from \"./Header\";\nimport { getCharacterList } from \"../resources/cardInfo\";\nexport default function Game() {\n  const [chars, setChars] = useState(getCharacterList);\n  const [newSelection, setNewSelection] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [lastSelected, setLastSelected] = useState();\n  const [score, setScore] = useState(0);\n\n  //shuffle on load and new selection\n  useEffect(() => {\n    if (newSelection) {\n      setNewSelection(false);\n      const shuffle = () => {\n        let newOrder = chars;\n        newOrder.sort(() => Math.random() - 0.5);\n        setChars([...newOrder]);\n      };\n      shuffle();\n    }\n  }, [chars, newSelection]);\n\n  //shuffle on game Over\n  useEffect(() => {\n    if (gameOver) {\n      setNewSelection(true);\n      setChars(getCharacterList);\n    }\n  }, [gameOver]);\n\n  useEffect(() => {\n    if (score === 12) {\n      setGameOver(true);\n    }\n  }, [score]);\n\n  //loop through list and find if clicked item has been selected yet. Increase score if it has not been, Game over if it has. At the end change new selection to true and reset characters with updated array\n  function toggleSelected(e) {\n    let newArrayList = chars;\n    newArrayList.forEach((item) => {\n      if (item.uniqueId === e.target.dataset.key) {\n        if (!item.selected) {\n          item.selected = true;\n          setScore((prevScore) => prevScore + 1);\n        } else {\n          setLastSelected(item.name);\n          setGameOver(true);\n        }\n      }\n    });\n    setNewSelection(true);\n    setChars([...newArrayList]);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Scoreboard characters={chars} gameOver={gameOver} currentScore={score} />\n      <Gameboard\n        characters={chars}\n        handleEvent={toggleSelected}\n        gameOver={gameOver}\n        resetGame={setGameOver}\n        resetScore={setScore}\n        lastPick={lastSelected}\n        score={score}\n      />\n    </div>\n  );\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport Game from \"./componenets/Game\";\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}